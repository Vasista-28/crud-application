package com.example.crud_application.repository;

import static org.assertj.core.api.Assertions.*;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.jdbc.Sql;

import com.example.crud_application.model.Item;

@DataJpaTest
@Sql(statements = {
    "DROP TABLE IF EXISTS ITEM;",
    "CREATE TABLE ITEM (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(255), description VARCHAR(255), price DOUBLE);",
    "INSERT INTO ITEM (name, description, price) VALUES ('Laptop', 'Gaming Laptop', 1500.0);",
    "INSERT INTO ITEM (name, description, price) VALUES ('Phone', 'Smartphone', 800.0);"
})
public class ItemRepositoryTest {

    @Autowired
    private ItemRepository itemRepository;

    @Test
    void testSaveAndFindById() {
        Item newItem = new Item();
        newItem.setName("Tablet");
        newItem.setDescription("Portable tablet");
        newItem.setPrice(600.0);

        // Save the item
        Item savedItem = itemRepository.save(newItem);

        // Retrieve the item
        Optional<Item> foundItem = itemRepository.findById(savedItem.getId());

        // Assertions
        assertThat(foundItem).isPresent();
        assertThat(foundItem.get().getName()).isEqualTo("Tablet");
    }

    @Test
    void testFindAll() {
        // Fetch all items
        var items = itemRepository.findAll();

        // Assertions
        assertThat(items).hasSize(2); // Adjusted to match the number of preloaded records
    }

    @Test
    void testDelete() {
        // Fetch the first item
        Optional<Item> item = itemRepository.findById(1L);

        // Delete the item
        item.ifPresent(itemRepository::delete);

        // Verify deletion
        Optional<Item> deletedItem = itemRepository.findById(1L);
        assertThat(deletedItem).isNotPresent();
    }
}
